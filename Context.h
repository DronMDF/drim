#pragma once
#include <memory>

class Event;

// Context - это область хранения состояния редактора.
// Внутри контекста располагается
// - документ
// - экран (необходимо понимание о его размерах)
// - положение видимой области документа на экране
// - положение курсора на экране
//
// Несколько контекстов могут работать паралельно - и образуют Workspace...
// Несколько документов к примеру.
//
// Полагаю, что тип контекста зависит от режима редактирования.
// И влияет на то, какие кнопки ты можешь нажать.
// В свете этого наверное методы по типам и не нужны.
// Идея крутится в готове - не могу сообразить.
//
// STDIN точно не знает как будет использована та или иная кнопка.
// Context вероятно знает.
//
class Context {
public:
	virtual ~Context() = default;

	// Context принимает на вход событие и возвращает новое состояние.
	// Но данный метод - плохое место для получения обратной связи
	// А контекст может порождать некие фоновые действия.
	// Данные действия можно получать списком после обработки события.
	// Как-то:
	// - Подгрузить оставшуюся часть файла. Либо какое-то другое io.
	// - Произвести подсветку синтаксиса на текущей версии документа
	// - Повзаимодействовать с language сервером...
	// Данные действия будут выполняться либо асинхронно, либо в отдельных потоках
	// И будут порождать события на обновление контекста.
	virtual std::shared_ptr<const Context> process(
		const std::shared_ptr<const Event> &event
	) const = 0;
};
