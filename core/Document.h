#pragma once
#include <memory>
#include <string>

// Document - это довольно широкое понятие.
// В базовой сути - он хранит текстовый файл.
//
// Но структура класса может различаться в зависимости от режимов работы
// - Это может быть полный документ.
// - Может быть исправление к документу
// - Может быть буффер для ввода данных в документ, которые еще не приняты.
// - Может быть декоратор с контекстной подсказкой... Или лучше их сюда не примешивать... :) Декораторы могут накладываться в контексте перед выводом

// Документ должен уметь выдавать свое содержимое, попадающее во viewport.
// viewport задается на входе.
//
// И я думаю, что текст удобнее хранить в u32string / uint32_t... их проще считать...

// Идея с порождением дочерних объектов - сомнительна.
// Правильнее навешивать поведения на Document снаружи.
// Если происходит вставка - На документ навешивается декоратор, который предоставляет контент с дополнением.
// Если удаление - Декоратор, который выкусывает часть текста.
// И тд...
//
// Это довольно хорошо вписывается в поддержку работы с файлами.
// Делаем декораторы, которые добавляют контект, но не являются юзердривен.
// И этим декораторам нельзя сделать undo.
// Вообще, пока файл не дочитался, ему по идее нельзя что-то юзердрайвить.

class View;

class Document {
public:
	virtual ~Document() = default;
	virtual std::string over(const std::shared_ptr<const View> &view) const = 0;
};
